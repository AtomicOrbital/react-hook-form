[{"F:\\Powergate\\code_mau\\src\\index.tsx":"1","F:\\Powergate\\code_mau\\src\\reportWebVitals.ts":"2","F:\\Powergate\\code_mau\\src\\redux\\configureStore.ts":"3","F:\\Powergate\\code_mau\\src\\App.tsx":"4","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\intlReducer.ts":"5","F:\\Powergate\\code_mau\\src\\modules\\intl\\component\\ConnectedIntlProvider.tsx":"6","F:\\Powergate\\code_mau\\src\\redux\\sagas.ts":"7","F:\\Powergate\\code_mau\\src\\redux\\reducer.ts":"8","F:\\Powergate\\code_mau\\src\\modules\\intl\\constants.ts":"9","F:\\Powergate\\code_mau\\src\\Routes.tsx":"10","F:\\Powergate\\code_mau\\src\\modules\\auth\\redux\\authReducer.ts":"11","F:\\Powergate\\code_mau\\src\\configs\\routes.ts":"12","F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\SignUpPage.tsx":"13","F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\LoginPageV2.tsx":"14","F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\LoginPage.tsx":"15","F:\\Powergate\\code_mau\\src\\modules\\common\\components\\ProtectedRoute.tsx":"16","F:\\Powergate\\code_mau\\src\\modules\\home\\pages\\HomePage.tsx":"17","F:\\Powergate\\code_mau\\src\\modules\\home\\pages\\ContactPage.tsx":"18","F:\\Powergate\\code_mau\\src\\configs\\api.ts":"19","F:\\Powergate\\code_mau\\src\\utils\\httpResponseCode.ts":"20","F:\\Powergate\\code_mau\\src\\utils\\constants.ts":"21","F:\\Powergate\\code_mau\\src\\modules\\common\\redux\\thunk.ts":"22","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\LoginForm.tsx":"23","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\SignUpForm.tsx":"24","F:\\Powergate\\code_mau\\src\\utils\\index.ts":"25","F:\\Powergate\\code_mau\\src\\modules\\auth\\utils.ts":"26","F:\\Powergate\\code_mau\\src\\i18n.js":"27","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ConfirmCard.tsx":"28","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Action\\photoAction.ts":"29","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Types\\photoCardType.ts":"30","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Reducers\\photoReducer.ts":"31","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Reducers\\tableReducer.ts":"32","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Types\\tableType.ts":"33","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\TableComponent.tsx":"34","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Action\\tableAction.ts":"35","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\ConfirmModal.tsx":"36","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\EditDataModal.tsx":"37","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\FilterComponent.tsx":"38","F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\DetailPage\\DetailPage.tsx":"39","F:\\Powergate\\code_mau\\src\\utils\\upload.ts":"40"},{"size":1322,"mtime":1681923461037,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":1681437024000,"results":"43","hashOfConfig":"42"},{"size":1325,"mtime":1681437024000,"results":"44","hashOfConfig":"42"},{"size":1295,"mtime":1681961923564,"results":"45","hashOfConfig":"42"},{"size":715,"mtime":1681437024000,"results":"46","hashOfConfig":"42"},{"size":531,"mtime":1681437024000,"results":"47","hashOfConfig":"42"},{"size":143,"mtime":1681437024000,"results":"48","hashOfConfig":"42"},{"size":909,"mtime":1682564622462,"results":"49","hashOfConfig":"42"},{"size":231,"mtime":1681791040318,"results":"50","hashOfConfig":"42"},{"size":1697,"mtime":1682566777532,"results":"51","hashOfConfig":"42"},{"size":1079,"mtime":1682551013548,"results":"52","hashOfConfig":"42"},{"size":215,"mtime":1682567143882,"results":"53","hashOfConfig":"42"},{"size":4184,"mtime":1681957254187,"results":"54","hashOfConfig":"42"},{"size":5103,"mtime":1681792984284,"results":"55","hashOfConfig":"42"},{"size":2136,"mtime":1681590424338,"results":"56","hashOfConfig":"42"},{"size":570,"mtime":1682565431614,"results":"57","hashOfConfig":"42"},{"size":144,"mtime":1682567049387,"results":"58","hashOfConfig":"42"},{"size":153,"mtime":1681437024000,"results":"59","hashOfConfig":"42"},{"size":688,"mtime":1682503454902,"results":"60","hashOfConfig":"42"},{"size":93,"mtime":1681437024000,"results":"61","hashOfConfig":"42"},{"size":303,"mtime":1682550605056,"results":"62","hashOfConfig":"42"},{"size":1244,"mtime":1682565971194,"results":"63","hashOfConfig":"42"},{"size":3456,"mtime":1681465769400,"results":"64","hashOfConfig":"42"},{"size":16259,"mtime":1681924778168,"results":"65","hashOfConfig":"42"},{"size":444,"mtime":1681437024000,"results":"66","hashOfConfig":"42"},{"size":2147,"mtime":1681791046301,"results":"67","hashOfConfig":"42"},{"size":1674,"mtime":1681924751634,"results":"68","hashOfConfig":"42"},{"size":6805,"mtime":1682266778195,"results":"69","hashOfConfig":"42"},{"size":2540,"mtime":1682192465136,"results":"70","hashOfConfig":"42"},{"size":660,"mtime":1682192615200,"results":"71","hashOfConfig":"42"},{"size":1539,"mtime":1682319777490,"results":"72","hashOfConfig":"42"},{"size":959,"mtime":1682581999091,"results":"73","hashOfConfig":"42"},{"size":216,"mtime":1682390166717,"results":"74","hashOfConfig":"42"},{"size":9092,"mtime":1682564262525,"results":"75","hashOfConfig":"42"},{"size":2877,"mtime":1682582586659,"results":"76","hashOfConfig":"42"},{"size":1094,"mtime":1682391264803,"results":"77","hashOfConfig":"42"},{"size":1944,"mtime":1682584843953,"results":"78","hashOfConfig":"42"},{"size":3562,"mtime":1682406765364,"results":"79","hashOfConfig":"42"},{"size":7292,"mtime":1682567564403,"results":"80","hashOfConfig":"42"},{"size":513,"mtime":1682566042386,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"1nzptiq",{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"84"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"84"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"84"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"84"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"84"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"F:\\Powergate\\code_mau\\src\\index.tsx",[],["175","176"],"F:\\Powergate\\code_mau\\src\\reportWebVitals.ts",[],"F:\\Powergate\\code_mau\\src\\redux\\configureStore.ts",[],"F:\\Powergate\\code_mau\\src\\App.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\intlReducer.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\component\\ConnectedIntlProvider.tsx",[],"F:\\Powergate\\code_mau\\src\\redux\\sagas.ts",["177"],"import { fork } from '@redux-saga/core/effects';\n\nexport default function* rootSaga() {\n  // we need add saga here\n  //yield fork(someSaga);\n}\n","F:\\Powergate\\code_mau\\src\\redux\\reducer.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\constants.ts",[],"F:\\Powergate\\code_mau\\src\\Routes.tsx",["178"],"import React, { lazy, Suspense } from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport { ROUTES } from './configs/routes';\nimport ProtectedRoute from './modules/common/components/ProtectedRoute';\nimport LoginPageV2 from './modules/auth/pages/LoginPageV2';\nimport SignUpPage from './modules/auth/pages/SignUpPage';\nimport ConfirmCard from './modules/auth/components/ConfirmCard';\nimport TableComponent from '../src/modules/auth/components/ExerciseTable/TableComponent';\n\nconst HomePage = lazy(() => import('./modules/home/pages/HomePage'));\nconst ContactPage = lazy(() => import('./modules/home/pages/ContactPage'));\nconst LoginPage = lazy(() => import('./modules/auth/pages/LoginPage'));\nconst DetailPage = lazy(() => import('./modules/auth/components/ExerciseTable/DetailPage/DetailPage'));\ninterface Props {}\nexport const Routes = (props: Props) => {\n  const location = useLocation();\n\n  return (\n    <Suspense fallback={<div>Loading.....</div>}>\n      <Switch location={location}>\n        {/* <Route path={ROUTES.login} component={LoginPageV2} /> */}\n        <Route path={ROUTES.login} component={LoginPage} />\n        <ProtectedRoute path={ROUTES.home} component={HomePage} />\n        <Route path={ROUTES.contact} component={ContactPage} />\n        <Route path={ROUTES.signup} component={SignUpPage} />\n        <Route path={ROUTES.card} component={ConfirmCard} />\n        <Route path={ROUTES.table} component={TableComponent} />\n\n        <Route path={`${ROUTES.detail}/:id`} component={DetailPage} />\n        <ProtectedRoute  path={ROUTES.profile} component={DetailPage} />\n        <Route path=\"/\" component={LoginPage} />\n      </Switch>\n    </Suspense>\n  );\n};\n","F:\\Powergate\\code_mau\\src\\modules\\auth\\redux\\authReducer.ts",[],"F:\\Powergate\\code_mau\\src\\configs\\routes.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\SignUpPage.tsx",["179","180","181","182","183","184","185","186"],"import React, { useEffect, useState } from 'react';\r\nimport logo from '../../../logo-420-x-108.png';\r\nimport { ISignUpParams } from '../../../models/auth';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../../redux/reducer';\r\nimport { Action } from 'redux';\r\nimport { fetchThunk } from '../../common/redux/thunk';\r\nimport { API_PATHS } from '../../../configs/api';\r\nimport { RESPONSE_STATUS_SUCCESS } from '../../../utils/httpResponseCode';\r\nimport { setUserInfo } from '../redux/authReducer';\r\nimport { ROUTES } from '../../../configs/routes';\r\nimport { replace } from 'connected-react-router';\r\nimport { getErrorMessageResponse } from '../../../utils';\r\nimport SignUpForm from '../components/SignUpForm';\r\nimport { ACCESS_TOKEN_KEY } from '../../../utils/constants';\r\nimport Cookies from 'js-cookie';\r\nimport { useForm } from 'react-hook-form';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n\r\nconst SignUpPage = () => {\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [locations, setLocations] = useState([]);\r\n    const [states, setStates] = useState([]);\r\n    const [idRegion, setIdRegion] = useState('');\r\n\r\n    const { control, handleSubmit, formState: { errors } } = useForm();\r\n\r\n    const getLocation = React.useCallback(async (idRegion?: string) => {\r\n        setLoading(true);\r\n\r\n        const json = await dispatch(\r\n            fetchThunk(idRegion ? `${API_PATHS.getLocation}?pid=${idRegion}` : API_PATHS.getLocation, 'get'),\r\n        );\r\n\r\n        setLoading(false);\r\n\r\n        if (json?.code === RESPONSE_STATUS_SUCCESS) {\r\n            console.log(json.data);\r\n\r\n            idRegion ? setStates(json.data) : setLocations(json.data);\r\n            return;\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getLocation(idRegion);\r\n    }, [getLocation, idRegion]);\r\n\r\n    function toastMessage(json: string) {\r\n        console.log(json)\r\n        if (json.trim() === \"OK\") {\r\n            toast.success(\"SingUp user sucess!\", {\r\n                autoClose: 3000,\r\n            })\r\n        } else {\r\n            toast.error(json, {\r\n                autoClose: 3000,\r\n            })\r\n        }\r\n    }\r\n\r\n    const onSignUp = React.useCallback(\r\n        async (values: ISignUpParams) => {\r\n            setErrorMessage('');\r\n            setLoading(true);\r\n\r\n            const json = await dispatch(\r\n                fetchThunk(API_PATHS.signUp, 'post', values),\r\n            );\r\n            // console.log(\"json\", json);\r\n\r\n            setLoading(false);\r\n\r\n            if (json?.code === RESPONSE_STATUS_SUCCESS) {\r\n                dispatch(setUserInfo(json.data));\r\n                \r\n\r\n                // Cookies.set(ACCESS_TOKEN_KEY, json.data.token, { expires: values.rememberMe ? 7 : undefined });\r\n                await toastMessage(json.message);\r\n\r\n                dispatch(replace(ROUTES.home));\r\n                return;\r\n            } else {\r\n                toastMessage(json.message)\r\n            }\r\n\r\n            // setErrorMessage(getErrorMessageResponse(json));\r\n        },\r\n        [dispatch],\r\n    );\r\n\r\n    const onChangeRegion = (idRegion: string) => {\r\n        setIdRegion(idRegion);\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className=\"container\"\r\n            style={{\r\n                height: '100vh',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n            <img src={logo} alt=\"\" style={{ maxWidth: '250px', margin: '32px' }} />\r\n\r\n            <SignUpForm\r\n                onSignUp={onSignUp}\r\n                loading={loading}\r\n                errorMessage={errorMessage}\r\n                locations={locations}\r\n                states={states}\r\n                // onChangeRegion={onChangeRegion}\r\n            />\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignUpPage;\r\n","F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\LoginPageV2.tsx",["187","188"],"import React, { Fragment, useCallback, useEffect } from 'react';\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport { AppState } from '../../../redux/reducer';\r\nimport { Action } from 'redux';\r\nimport { fetchThunk } from '../../common/redux/thunk';\r\nimport { API_PATHS } from '../../../configs/api';\r\nimport { RESPONSE_STATUS_SUCCESS } from '../../../utils/httpResponseCode';\r\nimport { setUserInfo } from '../redux/authReducer';\r\nimport Cookies from 'js-cookie';\r\nimport { ACCESS_TOKEN_KEY } from '../../../utils/constants';\r\nimport { ROUTES } from '../../../configs/routes';\r\nimport { replace } from 'connected-react-router';\r\nimport { getErrorMessageResponse } from '../../../utils';\r\n\r\nimport logo from '../../../logo-420-x-108.png'\r\n// import toast, { Toaster } from 'react-hot-toast';\r\n\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function LoginPageV2() {\r\n\r\n    // const notifyAccess = () => toast(\"Đăng nhập thành công !\");\r\n    // const notifyFailed = () => toast(\"Đăng nhập thất bại !\");\r\n\r\n    const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n    const { control, handleSubmit, formState: { errors } } = useForm();\r\n\r\n    const onSubmit = useCallback(async (data: Record<string, any>) => {\r\n        const json = await dispatch(fetchThunk(API_PATHS.signIn, 'post', { email: data.email, password: data.password }));\r\n\r\n        if (json?.code === RESPONSE_STATUS_SUCCESS) {\r\n            dispatch(setUserInfo(json.data));\r\n\r\n\r\n            Cookies.set(ACCESS_TOKEN_KEY, json.data.token, { expires: data.rememberMe ? 7 : undefined });\r\n            dispatch(replace(ROUTES.home));\r\n            // Show successful login message on toast\r\n            // alert('Login successful!');\r\n            toast.success(\"Đăng nhập thành công\", {\r\n                autoClose: 5000,\r\n                position: 'top-center'\r\n            })\r\n\r\n        } else {\r\n            // alert(getErrorMessageResponse(json));\r\n            // notifyFailed();\r\n            toast.error(\"Đăng nhập thất bại\", {\r\n                autoClose: 5000,\r\n                position: 'top-center',\r\n                icon: '🔥'\r\n            });\r\n        }\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <Fragment>\r\n            {/* <Toaster\r\n                position=\"top-center\"\r\n                reverseOrder={false}\r\n            /> */}\r\n            <div\r\n                className=\"container\"\r\n                style={{\r\n                    height: '100vh',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    flexDirection: 'column',\r\n                }}\r\n            >\r\n                <img src={logo} alt=\"logo\" style={{ maxWidth: '250px', margin: '32px' }} />\r\n                <h1>Login Page</h1>\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className='col-md-12'>\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"email\"\r\n                            rules={{ required: true }}\r\n                            render={({ field: { onChange, value } }) => (\r\n                                <input className='form-control mb-2' type=\"email\" placeholder=\"Email\" value={value} onChange={onChange} />\r\n                            )}\r\n                        />\r\n                        {errors.email && <span>Email is required</span>}\r\n                    </div>\r\n                    <div>\r\n                        <Controller\r\n                            control={control}\r\n                            name=\"password\"\r\n                            rules={{ required: true }}\r\n                            render={({ field: { onChange, value } }) => (\r\n                                <input className='form-control mb-2' type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\r\n                            )}\r\n                        />\r\n                        {errors.password && <span>Password is required</span>}\r\n                    </div>\r\n                    <div>\r\n                        <label>\r\n                            <Controller\r\n                                control={control}\r\n                                name=\"rememberMe\"\r\n                                defaultValue={false}\r\n                                render={({ field: { onChange, value } }) => (\r\n                                    <input className=\"form-check-input\" type=\"checkbox\" checked={value} onChange={onChange} />\r\n                                )}\r\n                            />\r\n                            Remember me\r\n                        </label>\r\n                    </div>\r\n                    <button className='btn btn-primary' type=\"submit\">Submit</button>\r\n                    <ToastContainer />\r\n                </form>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\n",["189","190"],"F:\\Powergate\\code_mau\\src\\modules\\auth\\pages\\LoginPage.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\common\\components\\ProtectedRoute.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\home\\pages\\HomePage.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\home\\pages\\ContactPage.tsx",[],"F:\\Powergate\\code_mau\\src\\configs\\api.ts",[],"F:\\Powergate\\code_mau\\src\\utils\\httpResponseCode.ts",[],"F:\\Powergate\\code_mau\\src\\utils\\constants.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\common\\redux\\thunk.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\LoginForm.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\SignUpForm.tsx",["191","192","193","194","195","196","197","198"],"import React, { useEffect, useState } from 'react';\r\nimport { useForm, Controller, SubmitHandler } from \"react-hook-form\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { ISignUpParams, ILocationParams, ISignUpValidation } from '../../../models/auth';\r\nimport { GENDER } from \"../../intl/constants\"\r\nimport { values } from 'lodash';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Select } from 'antd';\r\n\r\ninterface Props {\r\n    onSignUp(values: ISignUpParams): void;\r\n    loading: boolean;\r\n    errorMessage: string;\r\n    locations: Array<ILocationParams>;\r\n    states: Array<ILocationParams>;\r\n    onChangeRegion(idRegion: string): void;\r\n}\r\n\r\n\r\nconst SingupForm = (props: Props) => {\r\n    const { onSignUp, loading, errorMessage, locations, states, onChangeRegion } = props;\r\n    // console.log(states)\r\n    // console.log(locations)\r\n\r\n    const { control, handleSubmit } = useForm({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n            repeatPassword: '',\r\n            name: '',\r\n            gender: '',\r\n            region: [],\r\n            state: [],\r\n        }\r\n    });\r\n    const [formValues, setFormValues] = React.useState<ISignUpParams>({\r\n        email: '',\r\n        password: '',\r\n        repeatPassword: '',\r\n        name: '',\r\n        gender: '',\r\n        region: '',\r\n        state: '',\r\n    });\r\n    // const [validate, setValidate] = React.useState<ISignUpValidation>();\r\n    const [reatPass, setReatPass] = useState<string>(\"\")\r\n\r\n    const onSubmit = React.useCallback(() => {\r\n        // setValidate(validate);\r\n        onSignUp(formValues);\r\n        // console.log(\"thien\")\r\n    }, [formValues, onSignUp]);\r\n\r\n    function toastMessage() {\r\n        if (errorMessage.trim() === \"Login succes\") {\r\n            toast.success(\"Login sucess!\", {\r\n                duration: 2000,\r\n            })\r\n\r\n        } else {\r\n            toast.error(\"Invalid username / password\", {\r\n                duration: 1000,\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const { t } = useTranslation();\r\n    const { i18n } = useTranslation();\r\n\r\n    const handleChange = (value: any) => {\r\n        i18n.changeLanguage(value);\r\n    }\r\n\r\n    const { Option } = Select;\r\n    // console.log(formValues)\r\n    return (\r\n        <div\r\n            className=\"container\"\r\n            style={{\r\n                height: '100vh',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                flexDirection: 'column',\r\n            }}\r\n        >\r\n            <Select defaultValue=\"vi\" style={{ width: 120 }} onChange={handleChange} >\r\n                <Option value=\"en\">Eng</Option>\r\n                <Option value=\"vi\">Vi</Option>\r\n            </Select>\r\n\r\n\r\n            <form\r\n                onSubmit={handleSubmit(onSubmit)}\r\n                style={{ maxWidth: '560px', width: '100%' }}\r\n                className=\"row g-3 needs-validation\"\r\n            >\r\n\r\n                <Controller\r\n                    name=\"email\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        pattern: {\r\n                            value: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\r\n                            message: \"Value is not email\"\r\n                        },\r\n                        required: \"This email is required.\",\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputEmail\" className=\"form-label\">\r\n                                <FormattedMessage id={t('email')} />\r\n                            </label>\r\n                            <input\r\n                                {...field}\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                id=\"inputEmail\"\r\n                                onChange={(e) => {\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, email: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error.message}\r\n                            </small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This password is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('password')} />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n                                    // console.log(e)\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, password: e.target.value })\r\n                                }}\r\n                            />\r\n                            {\r\n\r\n                                error && <small className=\"text-danger\">\r\n                                    {error?.message}</small>\r\n                            }\r\n\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                {/* repeat password */}\r\n                <Controller\r\n                    name=\"repeatPassword\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    rules={{\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"This input must exceed 6 characters\"\r\n                        },\r\n                        required: \"This repeat password is required.\",\r\n                        validate: (val: string) => {\r\n\r\n                            if (val !== formValues.password) {\r\n                                return \"Your passwords do no match\";\r\n                            }\r\n                        },\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('repeatPassword')} />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n                                    // console.log(e)\r\n                                    if (e.target.value !== formValues.password) {\r\n                                        // console.log(e.target.value)\r\n                                        // console.log()\r\n\r\n                                        setReatPass(\"Your passwords do no match\")\r\n                                        // return\r\n                                        setFormValues({ ...formValues, repeatPassword: e.target.value })\r\n\r\n                                    } else {\r\n                                        // console.log(formValues.password)\r\n                                        setReatPass(\"\")\r\n                                        setFormValues({ ...formValues, repeatPassword: e.target.value })\r\n\r\n                                    }\r\n                                    // console.log(\"skfjdk\")\r\n                                    field.onChange(e);\r\n                                    // setFormValues({ ...formValues, repeatPassword: e.target.value })\r\n                                }}\r\n                            />\r\n                            {\r\n                                reatPass\r\n                                    ? <small className=\"text-danger\">\r\n                                        {reatPass}</small>\r\n                                    : error && <small className=\"text-danger\">\r\n                                        {error?.message}</small>\r\n                            }\r\n                        </div>\r\n                    )}\r\n                />\r\n                {/* Họ và Tên */}\r\n                <Controller\r\n                    name=\"name\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: \"This fullname is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('Name')} />\r\n                            </label>\r\n                            <input {...field}\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                id=\"inputPassword\"\r\n                                onChange={(e) => {\r\n                                    // console.log(\"name\", e.target.value)\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, name: e.target.value })\r\n                                }}\r\n                            />\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n                {/* Giới Tính */}\r\n                <Controller\r\n                    name=\"gender\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: \"This gender is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('gender')} />\r\n                            </label>\r\n                            <select\r\n                                onChange={(e) => {\r\n                                    // console.log(\"gender\",e.target.value)\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, gender: e.target.value })\r\n                                }}\r\n                                className=\"form-select\"\r\n                                aria-label=\"Default select example\">\r\n                                <option selected>--select an option--</option>\r\n                                {GENDER.map((gen) => {\r\n                                    return <option key={gen.label}>{gen.value}</option>\r\n                                })}\r\n                            </select>\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                {/* QUốc gia */}\r\n                <Controller\r\n                    name=\"region\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: \"This region is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('region')} />\r\n                            </label>\r\n                            <select\r\n                                onChange={(e) => {\r\n                                    let nameRegion = e.target.value\r\n                                    // console.log( \"region\", typeof nameRegion);\r\n                                    onChangeRegion(e.target.value)\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, region: nameRegion })\r\n                                }}\r\n                                className=\"form-select\"\r\n                                name=\"region\"\r\n                                aria-label=\"Default select example\">\r\n                                <option selected>--select an option--</option>\r\n                                {locations.map((ci) => {\r\n                                    return <option key={ci.id} value={ci.id} name-id={ci.name}>{ci.name}</option>\r\n                                })}\r\n                            </select>\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n                {/* Thành Phố */}\r\n                <Controller\r\n                    name=\"state\"\r\n                    control={control}\r\n                    rules={{\r\n                        required: \"This city is required.\",\r\n\r\n                    }}\r\n                    render={({ field, fieldState: { error } }) => (\r\n                        <div className=\"col-md-12\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">\r\n                                <FormattedMessage id={t('city')} />\r\n                            </label>\r\n                            <select\r\n                                onChange={(e) => {\r\n                                    // console.log(\"state\", e.target.value)\r\n                                    field.onChange(e);\r\n                                    setFormValues({ ...formValues, state: e.target.value })\r\n                                }}\r\n                                className=\"form-select\"\r\n                                aria-label=\"Default select example\"\r\n                            >\r\n                                <option selected>--select an option--</option>\r\n                                {states.map((ci) => {\r\n                                    return <option key={ci.id} value={ci.id}>{ci.name}</option>\r\n                                })}\r\n                            </select>\r\n                            {error && <small className=\"text-danger\">\r\n                                {error?.message}</small>}\r\n                        </div>\r\n                    )}\r\n                />\r\n\r\n\r\n\r\n                <div className=\"row justify-content-md-center\" style={{ margin: '16px 0' }}>\r\n                    <div className=\"col-md-auto\" style={{ position: \"relative\" }}>\r\n                        <button\r\n                            className=\"btn btn-primary\"\r\n                            type=\"submit\"\r\n                            style={{ minWidth: '160px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n                            disabled={loading}\r\n                            value=\"Đăng Nhập\"\r\n                        >\r\n                            {loading && <div className=\"spinner-border spinner-border-sm text-light mr-2\" role=\"status\" />}\r\n                            <FormattedMessage id={t('register')} />\r\n\r\n\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form >\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default SingupForm;","F:\\Powergate\\code_mau\\src\\utils\\index.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\utils.ts",["199"],"import { ILoginParams, ILoginValidation, ISignUpParams, ISignUpValidation } from '../../models/auth';\nimport { validEmailRegex } from '../../utils';\n\nconst validateEmail = (email: string) => {\n  if (!email) {\n    return 'emailRequire';\n  }\n\n  if (!validEmailRegex.test(email)) {\n    return 'emailInvalid';\n  }\n\n  return '';\n};\n\nconst validatePassword = (password: string) => {\n  if (!password) {\n    return 'passwordRequire';\n  }\n\n  if (password.length < 4) {\n    return 'minPasswordInvalid';\n  }\n\n  return '';\n};\n\nexport const validateLogin = (values: ILoginParams): ILoginValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n  };\n};\n\nexport const validLogin = (values: ILoginValidation) => {\n  return !values.email && !values.password;\n};\n\nexport const validateRepeatPassword = (password: string, reapeatPassword: string) => {\n  if (!reapeatPassword) {\n    return 'passwordRequire';\n  }\n\n  if (password != reapeatPassword) {\n    return 'matchPasswordInvalid';\n  }\n\n  return '';\n}\n\nconst validateField = (field: string, value: string) => {\n  if (value) return '';\n  let fieldRequire = '';\n  switch (field) {\n    case 'name':\n      fieldRequire = 'nameRequire';\n      break;\n\n    case 'gender':\n      fieldRequire = 'genderRequire';\n      break;\n    case 'region':\n      fieldRequire = 'regionRequire';\n      break;\n    case 'state':\n      fieldRequire = 'stateRequire';\n      break;\n  }\n  return fieldRequire;\n}\n\nexport const validateSignUp = (values: ISignUpParams): ISignUpValidation => {\n  return {\n    email: validateEmail(values.email),\n    password: validatePassword(values.password),\n    repeatPassword: validateRepeatPassword(values.password, values.repeatPassword),\n    name: validateField('name', values.name),\n    gender: validateField('gender', values.gender),\n    region: validateField('region', values.region),\n    state: validateField('state', values.state)\n  };\n};\n\nexport const validSignUp = (values: ISignUpValidation) => {\n  return !values.email && !values.password && !values.repeatPassword && !values.name && !values.gender && !values.region && !values.state;\n}\n","F:\\Powergate\\code_mau\\src\\i18n.js",[],["200","201"],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ConfirmCard.tsx",["202","203","204"],"import { Suspense, memo, useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  fetchPhotos,\r\n  updatePhotoTitles,\r\n  resetPhotoTitles,\r\n} from \"../../intl/redux/Action/photoAction\";\r\nimport { AppState } from \"../../../redux/reducer\";\r\n\r\ninterface UpdatedTitles {\r\n  [key: number]: string;\r\n}\r\n\r\nfunction ConfirmCard() {\r\n  const dispatch = useDispatch();\r\n  const { photos, loading } = useSelector((state: AppState) => state.photoReducer);\r\n  const [updatedTitles, setUpdatedTitles] = useState<UpdatedTitles>({});\r\n  const [editable, setEditable] = useState<number | null>(null);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const itemsPage = 10;\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchPhotos());\r\n  }, [dispatch]);\r\n\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>, index: number) => {\r\n    const globalIndex = (currentPage - 1) * itemsPage + index;\r\n    setUpdatedTitles({\r\n      ...updatedTitles,\r\n      [globalIndex]: event.target.value,\r\n    });\r\n    console.log(\"e\", event.target.value);\r\n  };\r\n\r\n  const handleEditClick = (index: number) => {\r\n    setEditable(index);\r\n  };\r\n\r\n  const handleConfirmUpdate = () => {\r\n    dispatch(updatePhotoTitles(updatedTitles));\r\n    setUpdatedTitles({});\r\n    setEditable(null);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    dispatch(resetPhotoTitles());\r\n    setUpdatedTitles(\r\n      photos.reduce((obj: UpdatedTitles, item: any, index: number) => {\r\n        obj[index] = item.title;\r\n        return obj;\r\n      }, {})\r\n    );\r\n    setEditable(null);\r\n  };\r\n\r\n  const totalPages = Math.ceil(photos.length / itemsPage);\r\n\r\n  const handlePageChange = (newPage: number) => {\r\n    if (newPage >= 1 && newPage <= totalPages) {\r\n      setCurrentPage(newPage);\r\n\r\n    }\r\n  };\r\n\r\n  const indexOfLastItem = currentPage * itemsPage;\r\n  const indexOfFirstItem = indexOfLastItem - itemsPage;\r\n  const currentItems = photos.slice(indexOfFirstItem, indexOfLastItem);\r\n\r\n  const Pagination = () => {\r\n    const maxPagesToShow = 10;\r\n    const arrayPages = [];\r\n    const firstPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n    const lastPage = Math.min(totalPages, firstPage + maxPagesToShow - 1);\r\n    for (let i = firstPage; i <= lastPage; i++) {\r\n      arrayPages.push(\r\n        <li key={i} className={`page-item ${currentPage === i ? \"active\" : \"\"}`}>\r\n          <a className=\"page-link\" href=\"#\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handlePageChange(i);\r\n            }}>\r\n            {i}\r\n          </a>\r\n        </li>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <nav className=\"d-flex justify-content-center\" aria-label=\"Page navigation example\">\r\n        <ul className=\"pagination\">\r\n          <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\r\n            <a className=\"page-link\" href=\"#\" aria-label=\"Previous\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (currentPage > 1) handlePageChange(currentPage - 1)\r\n              }}>\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n              <span className=\"sr-only\">Previous</span>\r\n            </a>\r\n          </li>\r\n          {arrayPages}\r\n          <li className={`page-item ${currentPage === totalPages ? \"disabled\" : \"\"}`}>\r\n            <a className=\"page-link\" href=\"#\" aria-label=\"Next\"\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                if (currentPage < totalPages) handlePageChange(currentPage + 1)\r\n              }}>\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n              <span className=\"sr-only\">Next</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Suspense fallback={<img src={require(\"../../../assets/imgLoading/Loading.gif\")} alt=\"Loading\" />}>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <table className=\"table table-hover\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Thumbnail</th>\r\n                      <th>Title</th>\r\n                      <th>Last Updated</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {loading ? (\r\n                      <tr>\r\n                        <td colSpan={3}>LOADING...</td>\r\n                      </tr>\r\n                    ) : (\r\n                      currentItems.map((item: any, index: number) => (\r\n                        <tr key={index} className={`${index % 2 === 0 ? \"table-secondary\" : \"\"}`}>\r\n                          <td><img src={item.thumbnailUrl} alt={item.title} className=\"img-thumbnail\" /></td>\r\n                          <td>\r\n                            {editable === index ? (\r\n                              <input\r\n                                type=\"text\"\r\n                                value={updatedTitles[(currentPage - 1) * itemsPage + index] || item.title}\r\n                                onChange={(event) => handleInputChange(event, index)}\r\n                                key={index}\r\n                                autoFocus\r\n                                className=\"form-control\"\r\n                              />\r\n                            ) : (\r\n                              <span onClick={() => handleEditClick(index)}>{item.title}</span>\r\n                            )}\r\n                          </td>\r\n                          <td>{Date.now()}</td>\r\n                        </tr>\r\n                      ))\r\n                    )}\r\n                  </tbody>\r\n                </table>\r\n                <div>\r\n                  <div className=\"d-flex justify-content-end\">\r\n                    <button\r\n                      style={{ marginRight: '30px' }}\r\n                      className={`btn btn btn-outline-success`}\r\n                      disabled={Object.keys(updatedTitles).length === 0}\r\n                      onClick={handleConfirmUpdate}\r\n                    >\r\n                      Confirm Update\r\n                    </button>\r\n                    <button\r\n                      className={`btn btn-outline-danger`}\r\n                      disabled={Object.keys(updatedTitles).length === 0}\r\n                      onClick={handleReset}\r\n                    >\r\n                      Reset\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-4\">\r\n                  <Pagination />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default memo(ConfirmCard);\r\n\r\n","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Action\\photoAction.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Types\\photoCardType.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Reducers\\photoReducer.ts",["205","206","207","208","209"],"import { FetchPhotosFailureAction, FetchPhotosRequestAction, FetchPhotosSuccessAction, ResetPhotoTitlesAction, UpdatePhotoTitlesAction } from \"../Action/photoAction\";\r\nimport {\r\n  FETCH_PHOTOS_REQUEST,\r\n  FETCH_PHOTOS_SUCCESS,\r\n  FETCH_PHOTOS_FAILURE,\r\n  UPDATE_PHOTO_TITLES,\r\n  RESET_PHOTO_TITLES,\r\n} from \"../Types/photoCardType\";\r\n\r\nconst initialState = {\r\n  photos: [],\r\n  loading: false,\r\n  error: null,\r\n  currentPage: 1,\r\n  itemsPage: 10,\r\n\r\n};\r\n\r\nexport interface PhotoState {\r\n  photos: [];\r\n  loading: boolean;\r\n  error: string | null;\r\n  currentPage: number;\r\n  itemsPage: number\r\n}\r\n\r\n\r\n\r\n\r\nconst photoReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case FETCH_PHOTOS_REQUEST:\r\n      return { ...state, loading: true };\r\n\r\n    case FETCH_PHOTOS_SUCCESS:\r\n      return { ...state, photos: action.payload, loading: false };\r\n\r\n    case FETCH_PHOTOS_FAILURE:\r\n      return { ...state, error: action.payload, loading: false };\r\n      \r\n    case UPDATE_PHOTO_TITLES:\r\n      const updatedPhotos = state.photos.map((photo: any, index) => {\r\n        if (action.payload[index]) {\r\n          return { ...photo, title: action.payload[index] };\r\n        } else {\r\n          return photo;\r\n        }\r\n      });\r\n      return { ...state, photos: updatedPhotos };\r\n    case RESET_PHOTO_TITLES:\r\n      console.log(\"action\", action.payload);\r\n      state.photos = action.payload\r\n      return { ...state, photos: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default photoReducer;\r\n","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Reducers\\tableReducer.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Types\\tableType.ts",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\TableComponent.tsx",["210","211","212","213","214"],"import React, { Fragment, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchTable } from '../../../intl/redux/Action/tableAction';\r\nimport styles from './scss/Table.module.css';\r\nimport ConfirmModal from \"./ConfirmModal\";\r\nimport EditDataModal from \"./EditDataModal\";\r\nimport { updateData, deleteData } from \"../../../intl/redux/Action/tableAction\";\r\nimport FilterComponent from './FilterComponent';\r\nimport moment from 'moment';\r\n\r\nexport interface DataItem {\r\n    id: number,\r\n    status: string,\r\n    date: string,\r\n    client: string,\r\n    currency: string,\r\n    total: number\r\n}\r\n\r\n\r\nconst TableComponent = () => {\r\n    const dispatch = useDispatch();\r\n    const { data } = useSelector((state: any) => state.tableReducer);\r\n    const [filteredData, setFilteredData] = useState([]);\r\n    const [sortDirection, setSortDirection] = useState(\"asc\");\r\n    const [selectedData, setSelectedData] = useState(null);\r\n    const [showConfirmModal, setShowConfirmModal] = useState<DataItem | null>(null);\r\n    const [showEditDataModal, setShowEditDataModal] = useState(false);\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const itemsPage = 10;\r\n    const indexOfLastItem = currentPage * itemsPage;\r\n    const indexOfFirstItem = indexOfLastItem - itemsPage;\r\n    const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);\r\n    const totalPages = Math.ceil(filteredData.length / itemsPage);\r\n\r\n    const handlePageChange = (newPage: number) => {\r\n        if (newPage >= 1 && newPage <= totalPages) {\r\n            setCurrentPage(newPage);\r\n\r\n        }\r\n    };\r\n\r\n    const Pagination = () => {\r\n        const maxPagesToShow = 2;\r\n        const arrayPages = [];\r\n        const firstPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n        const lastPage = Math.min(totalPages, firstPage + maxPagesToShow - 1);\r\n        for (let i = firstPage; i <= lastPage; i++) {\r\n            arrayPages.push(\r\n                <li key={i} className={`page-item ${currentPage === i ? \"active\" : \"\"}`}>\r\n                    <a className=\"page-link\" href=\"#\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handlePageChange(i);\r\n                        }}>\r\n                        {i}\r\n                    </a>\r\n                </li>\r\n            );\r\n        }\r\n        return (\r\n            <nav className=\"d-flex justify-content-center\" aria-label=\"Page navigation example\">\r\n                <ul className=\"pagination\">\r\n                    <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\r\n                        <a className=\"page-link\" href=\"#\" aria-label=\"Previous\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                if (currentPage > 1) handlePageChange(currentPage - 1)\r\n                            }}>\r\n                            <span aria-hidden=\"true\">&laquo;</span>\r\n                            <span className=\"sr-only\">Previous</span>\r\n                        </a>\r\n                    </li>\r\n                    {arrayPages}\r\n                    <li className={`page-item ${currentPage === totalPages ? \"disabled\" : \"\"}`}>\r\n                        <a className=\"page-link\" href=\"#\" aria-label=\"Next\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                if (currentPage < totalPages) handlePageChange(currentPage + 1)\r\n                            }}>\r\n                            <span aria-hidden=\"true\">&raquo;</span>\r\n                            <span className=\"sr-only\">Next</span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n    useEffect(() => {\r\n        dispatch(fetchTable());\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        setFilteredData(data);\r\n    }, [data]);\r\n\r\n    const handleFilter = (params: {\r\n        searchTerm: string;\r\n        status: string;\r\n        startDate: Date | null;\r\n        endDate: Date | null;\r\n    }) => {\r\n\r\n        let filtered = data.filter((item: any) => {\r\n            const matchesStatus = params.status\r\n                ? item.status.toLowerCase() === params.status.toLowerCase()\r\n                : true;\r\n            const matchesSearch = params.searchTerm\r\n                ? item.client\r\n                    .toLowerCase()\r\n                    .includes(params.searchTerm.toLowerCase())\r\n                : true;\r\n            const itemDate = moment(item.date);\r\n            const matchesStartDate = params.startDate\r\n                ? itemDate.isSameOrAfter(moment(params.startDate))\r\n                : true;\r\n            const matchesEndDate = params.endDate\r\n                ? itemDate.isSameOrBefore(moment(params.endDate))\r\n                : true;\r\n            return matchesStatus && matchesSearch && matchesStartDate && matchesEndDate;\r\n        });\r\n\r\n        setFilteredData(filtered);\r\n    };\r\n\r\n    const handleSortByTotal = () => {\r\n        const sortedData = [...filteredData].sort((a: DataItem, b: DataItem) => {\r\n            if (sortDirection === \"asc\") {\r\n                return a.total - b.total;\r\n            } else {\r\n                return b.total - a.total;\r\n            }\r\n        });\r\n\r\n        setFilteredData(sortedData);\r\n        setSortDirection(sortDirection === \"asc\" ? \"desc\" : \"asc\");\r\n    };\r\n\r\n    const handleRowClick = (rowData: any) => {\r\n        setSelectedData(rowData);\r\n        setShowEditDataModal(true);\r\n    };\r\n\r\n    const handleDeleteClick = (rowData: any) => {\r\n        setSelectedData(rowData);\r\n        setShowConfirmModal(true);\r\n    };\r\n\r\n    const handleUpdateData = (updatedData: any) => {\r\n        setShowEditDataModal(false);\r\n        dispatch(updateData(updatedData));\r\n    };\r\n\r\n    const handleDeleteData = () => {\r\n        setShowConfirmModal(false);\r\n        dispatch(deleteData(selectedData.id));\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setShowConfirmModal(false);\r\n        setShowEditDataModal(false);\r\n        setSelectedData(null);\r\n    };\r\n\r\n    return (\r\n        <div style={{ backgroundColor: '#f6f7fb' }} className=\"container\">\r\n            {showConfirmModal && (\r\n                <ConfirmModal onCancel={handleCancel} onDelete={handleDeleteData} />\r\n            )}\r\n            {showEditDataModal && (\r\n                <EditDataModal\r\n                    data={selectedData}\r\n                    onCancel={handleCancel}\r\n                    onUpdate={(updatedData: any) => dispatch(updateData(updatedData))}\r\n                />\r\n            )}\r\n            <FilterComponent onFilter={handleFilter} />\r\n            <div>\r\n                <table className=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Status</th>\r\n                            <th scope=\"col\">Date</th>\r\n                            <th scope=\"col\">Client</th>\r\n                            <th scope=\"col\">Currency</th>\r\n                            <th scope=\"col\" onClick={handleSortByTotal}>\r\n                                Total {sortDirection === \"asc\" ? \"▲\" : \"▼\"}\r\n                            </th>\r\n                            <th scope=\"col\">Invoice#</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {currentItems.map((item: DataItem, index) => (\r\n                            <tr key={index}>\r\n                                <td className={styles[item.status.toLowerCase()]}>\r\n                                    {item.status}\r\n                                </td>\r\n                                <td>{moment(item.date).format('MM-DD-YYYY')}</td>\r\n                                <td>{item.client}</td>\r\n                                <td>{item.currency}</td>\r\n                                <td>{item.total.toLocaleString(\"en-US\", { minimumFractionDigits: 2 })}</td>\r\n                                {/* <td>{item.invoiceNumber}</td> */}\r\n                                <td>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"btn btn-outline-primary\"\r\n                                        onClick={() => handleRowClick(item)}\r\n                                    >\r\n                                        View Details\r\n                                    </button>\r\n                                </td>\r\n                                <td className=\"text-danger\">\r\n                                    <i className=\"fa fa-trash\" onClick={() => handleDeleteClick(item)}></i>\r\n                                </td>\r\n                            </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n            <div className=\"mt-4\">\r\n                <Pagination />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default TableComponent;\r\n","F:\\Powergate\\code_mau\\src\\modules\\intl\\redux\\Action\\tableAction.ts",["215","216","217"],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\ConfirmModal.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\EditDataModal.tsx",["218"],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\FilterComponent.tsx",[],"F:\\Powergate\\code_mau\\src\\modules\\auth\\components\\ExerciseTable\\DetailPage\\DetailPage.tsx",["219"],"import React, { ChangeEvent, useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router';\r\nimport { Action } from 'redux';\r\nimport ReactCrop from 'react-image-crop';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\nimport axios from 'axios';\r\n\r\nimport { Modal, Button } from 'react-bootstrap';\r\nimport './DetailPage.css';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport Cookies from 'js-cookie';\r\nimport { replace } from 'connected-react-router';\r\nimport { AppState } from '../../../../../redux/reducer';\r\nimport { ROUTES } from '../../../../../configs/routes';\r\nimport { fetchThunk } from '../../../../common/redux/thunk';\r\nimport { API_PATHS } from '../../../../../configs/api';\r\nimport { RESPONSE_STATUS_SUCCESS } from '../../../../../utils/httpResponseCode';\r\nimport { logout, setUserInfo } from '../../../redux/authReducer';\r\nimport { generateAvatarUpload } from '../../../../../utils/upload';\r\nimport { ACCESS_TOKEN_KEY, APIUrl } from '../../../../../utils/constants';\r\n\r\nconst DetailPage = () => {\r\n  const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n  const location = useLocation();\r\n  const { user } = useSelector((state: AppState) => state.profile);\r\n  const avatarInputRef = useRef<HTMLInputElement>(null);\r\n  const imgRef = useRef<any>(null);\r\n  const [image, setImage] = useState(user?.avatar);\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const [crop, setCrop] = useState<any>({ unit: '%', width: 30, aspect: 1 });\r\n  const [completedCrop, setCompletedCrop] = useState<any>(null);\r\n  const previewCanvasRef = useRef<any>(null);\r\n\r\n  const getUserProfile = async () => {\r\n    if (location.pathname === ROUTES.profile) {\r\n      const json = await dispatch(fetchThunk(API_PATHS.userProfile, 'get'));\r\n      if (json?.code === RESPONSE_STATUS_SUCCESS) {\r\n        dispatch(setUserInfo(json.data));\r\n      }\r\n    }\r\n  };\r\n  console.log({location})\r\n  useEffect(() => {\r\n    getUserProfile();\r\n  }, []);\r\n\r\n  const changeAvatar = () => {\r\n    if (avatarInputRef.current !== null) avatarInputRef.current.click();\r\n  };\r\n\r\n  const onChooseAvatar = (e: ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    const files = e.target.files;\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setImage(reader.result as any);\r\n    };\r\n    if (files !== null && files.length) reader.readAsDataURL(files[0]);\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const onLoad = useCallback((img: any) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext('2d');\r\n    const pixelRatio = window.devicePixelRatio;\r\n\r\n    canvas.width = crop.width * pixelRatio * scaleX;\r\n    canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n    ctx.imageSmoothingQuality = 'high';\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n    );\r\n  }, [completedCrop]);\r\n\r\n  const uploadAvatar = async () => {\r\n    const file = await generateAvatarUpload(previewCanvasRef.current, completedCrop);\r\n    if (file) {\r\n      const formData = new FormData();\r\n      formData.append('file', file, file.name);\r\n      const config = {\r\n        headers: {\r\n          'content-type': 'multipart/form-data',\r\n          Authorization: Cookies.get(ACCESS_TOKEN_KEY) || '',\r\n        },\r\n      };\r\n      const json = await axios.put(API_PATHS.userProfile, formData, config);\r\n      if (json.data && json.data.code === RESPONSE_STATUS_SUCCESS) {\r\n        dispatch(setUserInfo(json.data.data));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onLogout = () => {\r\n    dispatch(logout());\r\n    dispatch(replace(ROUTES.login));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"card\" style={{ margin: 'auto', width: '100%', alignItems: 'center' }}>\r\n        <div className=\"profilepic\">\r\n          <img src={`${APIUrl}/${user?.avatar}`} className=\"card-img-top profilepic__image\" alt=\"avatar_url\" />\r\n          {location.pathname === ROUTES.profile && (\r\n            <div className=\"profilepic__content\" onClick={changeAvatar}>\r\n              <input ref={avatarInputRef} hidden type=\"file\" onChange={onChooseAvatar} accept=\"image/*\" />\r\n              <span className=\"profilepic__text\">Upload Avatar</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">Email</h5>\r\n          <p className=\"card-text\">{user?.email}</p>\r\n          <h5 className=\"card-title\">User Name</h5>\r\n          <p className=\"card-text\">{user?.name}</p>\r\n          <h5 className=\"card-title\">Description</h5>\r\n          <p className=\"card-text\">{user?.description}</p>\r\n          <h5 className=\"card-title\">State</h5>\r\n          <p className=\"card-text\">{user?.state}</p>\r\n          <h5 className=\"card-title\">Region</h5>\r\n          <p className=\"card-text\">{user?.region}</p>\r\n          {location.pathname === ROUTES.profile && (\r\n            <button className=\"btn btn-primary\" onClick={onLogout}>\r\n              Log Out\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <Modal\r\n        show={openModal}\r\n        onHide={() => {\r\n          setOpenModal(false);\r\n        }}\r\n      >\r\n        <Modal.Header>\r\n          <Modal.Title>Upload</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <ReactCrop\r\n            src={image ? image : ''}\r\n            crop={crop}\r\n            onChange={(newCrop: any) => {\r\n              console.log('====================================');\r\n              console.log(newCrop);\r\n              console.log('====================================');\r\n              setCrop(newCrop);\r\n            }}\r\n            onImageLoaded={onLoad}\r\n            onComplete={(c) => setCompletedCrop(c)}\r\n          />\r\n          <div>\r\n            <canvas\r\n              ref={previewCanvasRef}\r\n              // Rounding is important so the canvas width and height matches/is a multiple for sharpness.\r\n              style={{\r\n                width: Math.round(completedCrop?.width ?? 0),\r\n                height: Math.round(completedCrop?.height ?? 0),\r\n              }}\r\n            />\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={() => {\r\n              setOpenModal(false);\r\n            }}\r\n          >\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={() => {\r\n              setOpenModal(false);\r\n              uploadAvatar();\r\n            }}\r\n          >\r\n            Save Image\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailPage;\r\n","F:\\Powergate\\code_mau\\src\\utils\\upload.ts",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":1,"column":10,"nodeType":"226","messageId":"227","endLine":1,"endColumn":14},{"ruleId":"224","severity":1,"message":"228","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":19},{"ruleId":"224","severity":1,"message":"229","line":14,"column":10,"nodeType":"226","messageId":"227","endLine":14,"endColumn":33},{"ruleId":"224","severity":1,"message":"230","line":16,"column":10,"nodeType":"226","messageId":"227","endLine":16,"endColumn":26},{"ruleId":"224","severity":1,"message":"231","line":17,"column":8,"nodeType":"226","messageId":"227","endLine":17,"endColumn":15},{"ruleId":"224","severity":1,"message":"232","line":31,"column":13,"nodeType":"226","messageId":"227","endLine":31,"endColumn":20},{"ruleId":"224","severity":1,"message":"233","line":31,"column":22,"nodeType":"226","messageId":"227","endLine":31,"endColumn":34},{"ruleId":"224","severity":1,"message":"234","line":31,"column":49,"nodeType":"226","messageId":"227","endLine":31,"endColumn":55},{"ruleId":"235","severity":1,"message":"236","line":48,"column":8,"nodeType":"237","endLine":48,"endColumn":10,"suggestions":"238"},{"ruleId":"224","severity":1,"message":"239","line":97,"column":11,"nodeType":"226","messageId":"227","endLine":97,"endColumn":25},{"ruleId":"224","severity":1,"message":"240","line":1,"column":40,"nodeType":"226","messageId":"227","endLine":1,"endColumn":49},{"ruleId":"224","severity":1,"message":"229","line":15,"column":10,"nodeType":"226","messageId":"227","endLine":15,"endColumn":33},{"ruleId":"220","replacedBy":"241"},{"ruleId":"222","replacedBy":"242"},{"ruleId":"224","severity":1,"message":"240","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"224","severity":1,"message":"243","line":2,"column":31,"nodeType":"226","messageId":"227","endLine":2,"endColumn":44},{"ruleId":"224","severity":1,"message":"244","line":4,"column":17,"nodeType":"226","messageId":"227","endLine":4,"endColumn":24},{"ruleId":"224","severity":1,"message":"245","line":5,"column":42,"nodeType":"226","messageId":"227","endLine":5,"endColumn":59},{"ruleId":"224","severity":1,"message":"246","line":7,"column":10,"nodeType":"226","messageId":"227","endLine":7,"endColumn":16},{"ruleId":"224","severity":1,"message":"247","line":55,"column":14,"nodeType":"226","messageId":"227","endLine":55,"endColumn":26},{"ruleId":"248","severity":1,"message":"249","line":107,"column":43,"nodeType":"250","messageId":"251","endLine":107,"endColumn":44,"suggestions":"252"},{"ruleId":"248","severity":1,"message":"249","line":107,"column":59,"nodeType":"250","messageId":"251","endLine":107,"endColumn":60,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":44,"column":16,"nodeType":"256","messageId":"257","endLine":44,"endColumn":18},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"258","severity":1,"message":"259","line":79,"column":11,"nodeType":"260","endLine":83,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":94,"column":13,"nodeType":"260","endLine":98,"endColumn":18},{"ruleId":"258","severity":1,"message":"259","line":105,"column":13,"nodeType":"260","endLine":109,"endColumn":18},{"ruleId":"224","severity":1,"message":"261","line":1,"column":10,"nodeType":"226","messageId":"227","endLine":1,"endColumn":34},{"ruleId":"224","severity":1,"message":"262","line":1,"column":36,"nodeType":"226","messageId":"227","endLine":1,"endColumn":60},{"ruleId":"224","severity":1,"message":"263","line":1,"column":62,"nodeType":"226","messageId":"227","endLine":1,"endColumn":86},{"ruleId":"224","severity":1,"message":"264","line":1,"column":88,"nodeType":"226","messageId":"227","endLine":1,"endColumn":110},{"ruleId":"224","severity":1,"message":"265","line":1,"column":112,"nodeType":"226","messageId":"227","endLine":1,"endColumn":135},{"ruleId":"224","severity":1,"message":"266","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"258","severity":1,"message":"259","line":52,"column":21,"nodeType":"260","endLine":56,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":66,"column":25,"nodeType":"260","endLine":70,"endColumn":32},{"ruleId":"258","severity":1,"message":"259","line":77,"column":25,"nodeType":"260","endLine":81,"endColumn":32},{"ruleId":"224","severity":1,"message":"267","line":150,"column":11,"nodeType":"226","messageId":"227","endLine":150,"endColumn":27},{"ruleId":"224","severity":1,"message":"268","line":1,"column":8,"nodeType":"226","messageId":"227","endLine":1,"endColumn":13},{"ruleId":"224","severity":1,"message":"231","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":15},{"ruleId":"224","severity":1,"message":"230","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":26},{"ruleId":"224","severity":1,"message":"269","line":14,"column":9,"nodeType":"226","messageId":"227","endLine":14,"endColumn":17},{"ruleId":"235","severity":1,"message":"270","line":47,"column":6,"nodeType":"237","endLine":47,"endColumn":8,"suggestions":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"@typescript-eslint/no-unused-vars","'fork' is defined but never used.","Identifier","unusedVar","'LoginPageV2' is defined but never used.","'getErrorMessageResponse' is defined but never used.","'ACCESS_TOKEN_KEY' is defined but never used.","'Cookies' is defined but never used.","'control' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["274"],"'onChangeRegion' is assigned a value but never used.","'useEffect' is defined but never used.",["272"],["273"],"'SubmitHandler' is defined but never used.","'Toaster' is defined but never used.","'ISignUpValidation' is defined but never used.","'values' is defined but never used.","'toastMessage' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["275","276"],["277","278"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'FetchPhotosFailureAction' is defined but never used.","'FetchPhotosRequestAction' is defined but never used.","'FetchPhotosSuccessAction' is defined but never used.","'ResetPhotoTitlesAction' is defined but never used.","'UpdatePhotoTitlesAction' is defined but never used.","'Fragment' is defined but never used.","'handleUpdateData' is assigned a value but never used.","'axios' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserProfile'. Either include it or remove the dependency array.",["279"],"no-global-assign","no-unsafe-negation",{"desc":"280","fix":"281"},{"messageId":"282","fix":"283","desc":"284"},{"messageId":"285","fix":"286","desc":"287"},{"messageId":"282","fix":"288","desc":"284"},{"messageId":"285","fix":"289","desc":"287"},{"desc":"290","fix":"291"},"Update the dependencies array to be: [dispatch]",{"range":"292","text":"293"},"removeEscape",{"range":"294","text":"295"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"296","text":"297"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"298","text":"295"},{"range":"299","text":"297"},"Update the dependencies array to be: [getUserProfile]",{"range":"300","text":"301"},[1983,1985],"[dispatch]",[3271,3272],"",[3271,3271],"\\",[3287,3288],[3287,3287],[2054,2056],"[getUserProfile]"]