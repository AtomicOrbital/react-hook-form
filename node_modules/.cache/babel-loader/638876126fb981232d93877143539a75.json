{"ast":null,"code":"// import React from 'react';\n// import { useForm, Controller } from 'react-hook-form';\n// import { useDispatch } from 'react-redux';\n// import { ThunkDispatch } from 'redux-thunk';\n// import { AppState } from '../../../redux/reducer';\n// import { Action } from 'redux';\n// import { fetchThunk } from '../../common/redux/thunk';\n// import { API_PATHS } from '../../../configs/api';\n// import { RESPONSE_STATUS_SUCCESS } from '../../../utils/httpResponseCode';\n// import { setUserInfo } from '../redux/authReducer';\n// import Cookies from 'js-cookie';\n// import { ACCESS_TOKEN_KEY } from '../../../utils/constants';\n// import { ROUTES } from '../../../configs/routes';\n// import { replace } from 'connected-react-router';\n// import { getErrorMessageResponse } from '../../../utils';\n// import { ToastContainer, toast } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// export default function LoginPageV2() {\n//     const notify = () => toast(\"Wow so easy!\");\n//     const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\n//     const { control, handleSubmit, formState: { errors } } = useForm();\n//     const onSubmit = React.useCallback(async (data: Record<string, any>) => {\n//         const json = await dispatch(fetchThunk(API_PATHS.signIn, 'post', { email: data.email, password: data.password }));\n//         if (json?.code === RESPONSE_STATUS_SUCCESS) {\n//             dispatch(setUserInfo(json.data));\n//             Cookies.set(ACCESS_TOKEN_KEY, json.data.token, { expires: data.rememberMe ? 7 : undefined });\n//             dispatch(replace(ROUTES.home));\n//             // Show successful login message on toast\n//             alert('Login successful!');\n//         } else {\n//             alert(getErrorMessageResponse(json));\n//         }\n//     }, [dispatch]);\n//     return (\n//         <div\n//             className=\"container\"\n//             style={{\n//                 height: '100vh',\n//                 display: 'flex',\n//                 alignItems: 'center',\n//                 justifyContent: 'center',\n//                 flexDirection: 'column',\n//             }}\n//         >\n//             <h1>Login Page</h1>\n//             <form onSubmit={handleSubmit(onSubmit)}>\n//                 <div>\n//                     <Controller\n//                         control={control}\n//                         name=\"email\"\n//                         rules={{ required: true }}\n//                         render={({ field: { onChange, value } }) => (\n//                             <input type=\"email\" placeholder=\"Email\" value={value} onChange={onChange} />\n//                         )}\n//                     />\n//                     {errors.email && <span>Email is required</span>}\n//                 </div>\n//                 <div>\n//                     <Controller\n//                         control={control}\n//                         name=\"password\"\n//                         rules={{ required: true }}\n//                         render={({ field: { onChange, value } }) => (\n//                             <input type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\n//                         )}\n//                     />\n//                     {errors.password && <span>Password is required</span>}\n//                 </div>\n//                 <div>\n//                     <label>\n//                         <Controller\n//                             control={control}\n//                             name=\"rememberMe\"\n//                             defaultValue={false}\n//                             render={({ field: { onChange, value } }) => (\n//                                 <input type=\"checkbox\" checked={value} onChange={onChange} />\n//                             )}\n//                         />\n//                         Remember me\n//                     </label>\n//                 </div>\n//                 <button onClick={notify} type=\"submit\">Submit</button>\n//                 <ToastContainer />\n//             </form>\n//         </div>\n//     );\n// }","map":{"version":3,"sources":["F:/Powergate/code_mau/src/modules/auth/pages/LoginPageV2.tsx"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from 'react';\r\n// import { useForm, Controller } from 'react-hook-form';\r\n// import { useDispatch } from 'react-redux';\r\n// import { ThunkDispatch } from 'redux-thunk';\r\n// import { AppState } from '../../../redux/reducer';\r\n// import { Action } from 'redux';\r\n// import { fetchThunk } from '../../common/redux/thunk';\r\n// import { API_PATHS } from '../../../configs/api';\r\n// import { RESPONSE_STATUS_SUCCESS } from '../../../utils/httpResponseCode';\r\n// import { setUserInfo } from '../redux/authReducer';\r\n// import Cookies from 'js-cookie';\r\n// import { ACCESS_TOKEN_KEY } from '../../../utils/constants';\r\n// import { ROUTES } from '../../../configs/routes';\r\n// import { replace } from 'connected-react-router';\r\n// import { getErrorMessageResponse } from '../../../utils';\r\n\r\n// import { ToastContainer, toast } from 'react-toastify';\r\n// import 'react-toastify/dist/ReactToastify.css';\r\n\r\n// export default function LoginPageV2() {\r\n\r\n//     const notify = () => toast(\"Wow so easy!\");\r\n    \r\n\r\n//     const dispatch = useDispatch<ThunkDispatch<AppState, null, Action<string>>>();\r\n//     const { control, handleSubmit, formState: { errors } } = useForm();\r\n\r\n//     const onSubmit = React.useCallback(async (data: Record<string, any>) => {\r\n//         const json = await dispatch(fetchThunk(API_PATHS.signIn, 'post', { email: data.email, password: data.password }));\r\n\r\n//         if (json?.code === RESPONSE_STATUS_SUCCESS) {\r\n//             dispatch(setUserInfo(json.data));\r\n//             Cookies.set(ACCESS_TOKEN_KEY, json.data.token, { expires: data.rememberMe ? 7 : undefined });\r\n//             dispatch(replace(ROUTES.home));\r\n//             // Show successful login message on toast\r\n//             alert('Login successful!');\r\n//         } else {\r\n//             alert(getErrorMessageResponse(json));\r\n//         }\r\n//     }, [dispatch]);\r\n\r\n//     return (\r\n//         <div\r\n//             className=\"container\"\r\n//             style={{\r\n//                 height: '100vh',\r\n//                 display: 'flex',\r\n//                 alignItems: 'center',\r\n//                 justifyContent: 'center',\r\n//                 flexDirection: 'column',\r\n//             }}\r\n//         >\r\n//             <h1>Login Page</h1>\r\n//             <form onSubmit={handleSubmit(onSubmit)}>\r\n//                 <div>\r\n//                     <Controller\r\n//                         control={control}\r\n//                         name=\"email\"\r\n//                         rules={{ required: true }}\r\n//                         render={({ field: { onChange, value } }) => (\r\n//                             <input type=\"email\" placeholder=\"Email\" value={value} onChange={onChange} />\r\n//                         )}\r\n//                     />\r\n//                     {errors.email && <span>Email is required</span>}\r\n//                 </div>\r\n//                 <div>\r\n//                     <Controller\r\n//                         control={control}\r\n//                         name=\"password\"\r\n//                         rules={{ required: true }}\r\n//                         render={({ field: { onChange, value } }) => (\r\n//                             <input type=\"password\" placeholder=\"Password\" value={value} onChange={onChange} />\r\n//                         )}\r\n//                     />\r\n//                     {errors.password && <span>Password is required</span>}\r\n//                 </div>\r\n//                 <div>\r\n//                     <label>\r\n//                         <Controller\r\n//                             control={control}\r\n//                             name=\"rememberMe\"\r\n//                             defaultValue={false}\r\n//                             render={({ field: { onChange, value } }) => (\r\n//                                 <input type=\"checkbox\" checked={value} onChange={onChange} />\r\n//                             )}\r\n//                         />\r\n//                         Remember me\r\n//                     </label>\r\n//                 </div>\r\n//                 <button onClick={notify} type=\"submit\">Submit</button>\r\n//                 <ToastContainer />\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}